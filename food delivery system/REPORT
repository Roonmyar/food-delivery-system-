Введение в систему:
"Система доставки еды" - это база данных, созданная для управления процессом доставки еды от ресторанов до клиентов. Система позволяет ресторанам добавлять и редактировать свои меню, принимать заказы от клиентов и отслеживать статус доставки заказа. Клиенты могут просматривать меню, делать заказы и отслеживать статус своих заказов. Курьеры получают доступ к списку заказов для доставки и могут обновлять статусы заказов в системе.
База данных включает в себя несколько таблиц, организованных в соответствии с нормализацией, что позволяет уменьшить дублирование данных и повысить эффективность хранения и доступа к информации. ER-диаграмма системы является интуитивно понятной и позволяет легко понять связи между таблицами. Каждый элемент базы данных, включая таблицы, поля и связи, был тщательно спроектирован и протестирован для обеспечения надежной и эффективной работы системы доставки еды.




Наша база данных "Система доставки еды" соответствует требованиям нормализации и находится в третьей нормальной форме (3NF), что подтверждается следующими аргументами:
    1. Первая нормальная форма (1NF): Каждый атрибут в таблице является атомарным, то есть не может быть разбит на более мелкие составляющие. В нашей базе данных каждый атрибут является атомарным, и каждая таблица имеет первичный ключ.
    2. Вторая нормальная форма (2NF): Каждый атрибут в таблице должен зависеть только от ее первичного ключа. Если в таблице есть составной ключ, то каждый атрибут должен зависеть от всего составного ключа, а не только от его части. В нашей базе данных каждая таблица имеет первичный ключ, и все атрибуты в таблице зависят только от этого ключа.
    3. Третья нормальная форма (3NF): Каждый атрибут в таблице должен зависеть только от ее первичного ключа, и не должно быть транзитивной зависимости между атрибутами. В нашей базе данных мы избегаем такой зависимости, и каждый атрибут зависит только от первичного ключа соответствующей таблицы.
Таким образом, наша база данных "Система доставки еды" соответствует нормальным формам, что обеспечивает более эффективное и безопасное хранение данных, а также облегчает их обработку и анализ.








create or replace PROCEDURE get_customer_orders(
    p_customer_id IN NUMBER
)
IS
BEGIN
    FOR order_rec IN (
        SELECT o.id, m.item_name, r.name as restaurant_name
        FROM orders o
        JOIN menu m ON o.id = m.id
        JOIN restaurants r ON m.restaurant_id = r.restaurant_id
        WHERE o.customer_id = p_customer_id
    )
    LOOP
        DBMS_OUTPUT.PUT_LINE('Order ID: ' || order_rec.id || ', Item Name: ' || order_rec.item_name || ', Restaurant Name: ' || order_rec.restaurant_name);
    END LOOP;
END;
/









данная процедура предназначена для получения списка заказов конкретного клиента и предоставляет удобный способ получения этой информации в удобочитаемом формате. 



create or replace FUNCTION get_table_count(table_name IN VARCHAR2) 
RETURN NUMBER IS
  row_count NUMBER;
BEGIN
  EXECUTE IMMEDIATE 'SELECT COUNT(*) FROM ' || table_name INTO row_count;
  RETURN row_count;
END;
/

функция get_table_count может использоваться для получения общего количества записей в таблицах, например, для мониторинга количества клиентов, заказов, ресторанов и т.д. 



create or replace TRIGGER check_menu_description_length
BEFORE INSERT OR UPDATE ON menu
FOR EACH ROW
DECLARE
  description_length INTEGER;
  invalid_length EXCEPTION;
BEGIN
  description_length := LENGTH(:NEW.description);
  IF description_length < 5 THEN
    RAISE invalid_length;
  END IF;
EXCEPTION
  WHEN invalid_length THEN
    raise_application_error(-20001, 'Description must be at least 5 characters long');
END;
/


Таким образом, цель данного триггера - гарантировать, что описание элемента меню содержит достаточное количество символов, чтобы избежать ошибок в дальнейшей работе с базой данных. Если описание не соответствует требуемой длине, триггер не позволит выполнить операцию вставки или обновления, а вместо этого возбудит пользовательскую ошибку.

create or replace TRIGGER count_rows_trigger BEFORE INSERT ON customers FOR EACH ROW DECLARE row_count NUMBER; BEGIN row_count := get_table_count('customers') + 1; DBMS_OUTPUT.PUT_LINE('Current row count: ' || row_count); END; / 

Этот триггер срабатывает перед вставкой новой строки в таблицу "customers" и вызывает функцию "get_table_count", которая подсчитывает текущее количество строк в таблице "customers". Затем триггер выводит текущее количество строк в таблице в консоль с помощью процедуры "DBMS_OUTPUT.PUT_LINE". Он используется для мониторинга количества строк в таблице и может помочь в отладке и оптимизации базы данных. 
